// media
@mixin mmiw($width, $unit) {
    @media (min-width: $width+$unit) {
        @content;
    }
}

@mixin mmaw($width, $unit) {
    @media (max-width: $width+$unit) {
        @content;
    }
}

@mixin mmiaw($widthStart, $widthEnd, $unit) {
    @media (min-width: $widthStart+$unit) and (max-width: $widthEnd+$unit) {
        @content;
    }
}

// string to number
@function number($string) {
    $number: 0;

    @for $i from 1 through str-length($string) {
        // 切割字串
        $character: str-slice($string, $i, $i);

        // 利用index取得對應數字
        $index: str-index('0123456789', $character) - 1;

        // 組合數字
        $number: $number * 10 + $index;
    }

    @return $number;
}

// 單位判斷
@function checkUnit($string) {

    $units: px em;
    $unit: null;

    @for $i from 1 through length($units) {
        // 跑出對應的單位
        $hasUnit: str-index($string, nth($units, $i));

        @if ($hasUnit !=null) {
            $unit: nth($units, $i);
        }
    }

    // 跑完還是沒有
    @if($unit==null) {
        $unit: px;
    }

    @return $unit;
}

// remove unit
@function removeUnit($string, $unit) {

    // 找出單位index
    $index: str-index($string, $unit);

    @if ($index !=null) {
        // 取出對應的數字
        $string: str-slice($string, 1, $index - 1);
    }

    @return $string;
}

// media
@mixin media($width, $widthRange: null) {
    // 判斷型態
    $unit: null;
    $type: type-of($width);

    // number
    @if ($type==number) {

        // 轉string
        $width: $width + '';

        // 有輸入$widthRange
        @if ($widthRange !=null) {
            $width: $width +'-'+ $widthRange;
        }

        $type: string;
    }

    // list
    @if ($type==list) {

        $width: nth($width, 1) +'-'+ nth($width, 2);
        $type: string;

    }

    // string 	
    @if ($type==string) {

        // 抓dash位置	
        $dashIndex: str-index($width, '-');

        // 字串長度
        $stringLength: str-length($width);

        // 整理單位和寬度
        @if ($dashIndex==1) or ($dashIndex==$stringLength) or ($dashIndex==null) {
            $unit: checkUnit($width);
            $width: removeUnit($width, $unit);
        }

        @if ($dashIndex==$stringLength) or ($dashIndex==null) {

            // max-width
            $max: $stringLength - 1;

            @if ($dashIndex==null) {
                $max: $stringLength;
            }

            $width: str-slice($width, 1, $max);

            // 呼叫對應mixin
            @include mmaw($width, $unit) {
                @content;
            }

        }

        @else if ($dashIndex==1) {

            // min-width
            $width: str-slice($width, 2, $stringLength);

            // 呼叫對應mixin
            @include mmiw($width, $unit) {
                @content;
            }

        }

        @else {

            // min-width and max-width
            // 以dash切割
            $firstWidth: str-slice($width, 1, $dashIndex - 1);
            $secondWidth: str-slice($width, $dashIndex + 1, $stringLength);

            $unit: checkUnit($firstWidth);

            $firstWidth: removeUnit($firstWidth, $unit);
            $secondWidth: removeUnit($secondWidth, $unit);

            // 組成數字
            $widths: number($firstWidth), number($secondWidth);

            @include mmiaw(min($widths...), max($widths...), $unit) {
                @content;
            }
        }
    }
}


.test {
    height: 500px;
    margin-left: auto;
    margin-right: auto;

    @include media(200px, 1920px) {
        background-color: blue;
    }

    // @include media(1024px) {
    // 	background-color: red;
    // }
}